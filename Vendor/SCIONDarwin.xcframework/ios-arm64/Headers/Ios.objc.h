// Objective-C API for talking to github.com/netsec-ethz/scion-apps/pkg/ios Go package.
//   gobind -lang=objc github.com/netsec-ethz/scion-apps/pkg/ios
//
// File is generated by gobind. Do not edit.

#ifndef __Ios_H__
#define __Ios_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class IosConnection;
@class IosListener;
@class IosPath;
@class IosPathCollection;
@class IosPathMetadata;
@class IosPathRaw;
@class IosReadResult;
@class IosUDPAddress;
@class IosWriteResult;
@protocol IosOldSelectorObserver;
@class IosOldSelectorObserver;
@protocol IosPathCollectionSource;
@class IosPathCollectionSource;
@protocol IosPathPolicyFilter;
@class IosPathPolicyFilter;
@protocol IosSelectorObserver;
@class IosSelectorObserver;

@protocol IosOldSelectorObserver <NSObject>
- (void)currentPathDidChange;
- (void)currentPathDidGoDown;
- (void)currentPathWillChange;
- (void)pathsDidChange;
- (void)pathsWillChange;
@end

@protocol IosPathCollectionSource <NSObject>
- (IosPath* _Nullable)getPathAt:(long)index;
- (long)getPathCount;
@end

@protocol IosPathPolicyFilter <NSObject>
- (id<IosPathCollectionSource> _Nullable)sort:(id<IosPathCollectionSource> _Nullable)paths context:(int64_t)context;
@end

@protocol IosSelectorObserver <NSObject>
- (void)pathDidGoDown:(IosPath* _Nullable)path;
- (void)pathsDidChange;
- (void)pathsWillChange;
@end

@interface IosConnection : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (void)close;
- (IosPath* _Nullable)getCurrentPath;
- (IosUDPAddress* _Nullable)getLocalAddress;
- (IosPathCollection* _Nullable)getPaths;
- (IosUDPAddress* _Nullable)getRemoteAddress;
- (IosReadResult* _Nullable)read:(NSData* _Nullable)buffer;
- (void)setPathSelectorObserver:(id<IosSelectorObserver> _Nullable)observer;
/**
 * / Forces a re-evaluation of the policy. Use when the underlying PathPolicyFilter behavior changes
 */
- (void)updatePolicy:(int64_t)context;
/**
 * Set wantUsedPath to save an extra allocation
 */
- (IosWriteResult* _Nullable)write:(NSData* _Nullable)buffer wantUsedPath:(BOOL)wantUsedPath;
- (IosWriteResult* _Nullable)writePath:(NSData* _Nullable)buffer path:(IosPath* _Nullable)path;
@end

@interface IosListener : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (void)close;
- (IosUDPAddress* _Nullable)getLocalAddress;
- (IosConnection* _Nullable)makeConnectionToRemote:(IosUDPAddress* _Nullable)remote policyFilter:(id<IosPathPolicyFilter> _Nullable)policyFilter error:(NSError* _Nullable* _Nullable)error;
- (IosReadResult* _Nullable)read:(NSData* _Nullable)buffer;
@end

/**
 * Yo dawg I heard you like wrappers, so I put a....
 */
@interface IosPath : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Unix timestamp in s at UTC
 */
- (int64_t)getExpiry;
- (NSString* _Nonnull)getFingerprint;
- (IosPathMetadata* _Nullable)getMetadata;
- (IosPathRaw* _Nullable)getRaw;
/**
 * Related to metadata. If metadata is nil returns 0.
 */
- (long)length;
- (IosPath* _Nullable)reversed:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Implements PathCollectionSource
 */
@interface IosPathCollection : NSObject <goSeqRefInterface, IosPathCollectionSource> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (IosPath* _Nullable)getPathAt:(long)index;
- (long)getPathCount;
@end

@interface IosPathMetadata : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * In kbit/s
 */
- (int64_t)getBandwidthAt:(long)index;
- (NSString* _Nonnull)getInterfaceIAAt:(long)index;
- (int64_t)getInterfaceIDAt:(long)index;
/**
 * In microseconds
 */
- (int64_t)getLatencyAt:(long)index;
/**
 * In bytes
 */
- (int32_t)getMTU;
@end

@interface IosPathRaw : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@end

@interface IosReadResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) long bytesRead;
@property (nonatomic) IosUDPAddress* _Nullable source;
@property (nonatomic) IosPath* _Nullable path;
@property (nonatomic) NSError* _Nullable err;
@end

@interface IosUDPAddress : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (BOOL)isForeignTo:(IosUDPAddress* _Nullable)other;
- (NSString* _Nonnull)string;
@end

@interface IosWriteResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) long bytesWritten;
@property (nonatomic) IosPath* _Nullable path;
@property (nonatomic) NSError* _Nullable err;
@end

@interface Ios : NSObject
+ (NSString* _Nonnull) configPath;
+ (void) setConfigPath:(NSString* _Nonnull)v;

@end

FOUNDATION_EXPORT IosConnection* _Nullable IosDialUDP(IosUDPAddress* _Nullable destination, id<IosPathPolicyFilter> _Nullable policyFilter, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT IosListener* _Nullable IosListenUDP(long port, NSError* _Nullable* _Nullable error);

// skipped function PathCollectionSourceToSlice with unsupported parameter or return types


FOUNDATION_EXPORT void IosRunScion(void);

FOUNDATION_EXPORT void IosRunSciond(void);

FOUNDATION_EXPORT void IosSetDaemonConfigPath(NSString* _Nullable path);

FOUNDATION_EXPORT void IosSetDispatcherConfigPath(NSString* _Nullable path);

FOUNDATION_EXPORT BOOL IosSetDispatcherSocket(NSString* _Nullable path, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL IosSetSciondAddress(NSString* _Nullable addr, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT IosUDPAddress* _Nullable IosUDPAddressMake(NSString* _Nullable str, NSError* _Nullable* _Nullable error);

@class IosOldSelectorObserver;

@class IosPathCollectionSource;

@class IosPathPolicyFilter;

@class IosSelectorObserver;

@interface IosOldSelectorObserver : NSObject <goSeqRefInterface, IosOldSelectorObserver> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)currentPathDidChange;
- (void)currentPathDidGoDown;
- (void)currentPathWillChange;
- (void)pathsDidChange;
- (void)pathsWillChange;
@end

@interface IosPathCollectionSource : NSObject <goSeqRefInterface, IosPathCollectionSource> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (IosPath* _Nullable)getPathAt:(long)index;
- (long)getPathCount;
@end

@interface IosPathPolicyFilter : NSObject <goSeqRefInterface, IosPathPolicyFilter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (id<IosPathCollectionSource> _Nullable)sort:(id<IosPathCollectionSource> _Nullable)paths context:(int64_t)context;
@end

@interface IosSelectorObserver : NSObject <goSeqRefInterface, IosSelectorObserver> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)pathDidGoDown:(IosPath* _Nullable)path;
- (void)pathsDidChange;
- (void)pathsWillChange;
@end

#endif
